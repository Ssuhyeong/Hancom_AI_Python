# Day_14_03_PythonWeather.py
import re
import requests

# 클롤링 시에는 실제 타이핑 하면 안된다. 복
#url = 'https://news.naver.com/'
# url = 'https://movie.naver.com/'
url = 'http://www.kma.go.kr/weather/forecast/mid-term-rss3.jsp?stnId=184'
received = requests.get(url)
# print(received, type(received))
# f = open('data/weather.txt', 'w', encoding='utf=8')

text = received.text
# print(data)

# temp = re.findall(r'<city>제주</city>', tex)
# temp = re.findall(r'<city>.+</city>', text)
temp = re.findall(r'<city>(.+)</city>', text)       # 안에 있는 부분을 추출 그걸 원해
# print(temp)

# .+ 변별력 없음. 찾을 수 있는 게 없음.

# <city>서귀포</city>
# <city>성산</city>
# <city>성판악</city>

# html : 사용자들이 보는 시각에 치중한
# xml : 데이터에 치중

# 읽어온 데이터 동기화를 하는 것이 너무 어렵다.
# t1 = re.findall(r'<province>(.+)</province>', text)
# t2 = re.findall(r'<city>(.+)</city>', text)
# t3 = re.findall(r'<mode>(.+)</mode>', text)
# t4 = re.findall(r'<tmEf>(.+)</tmEf>', text)
# t5 = re.findall(r'<tmn>(.+)</tmn>', text)
#
# print(len(t1), t1)
# print(len(t2), t2)
# print(len(t3), t3)
# print(len(t4), t4)
# print(len(t5), t5)

# 7 ['제주도', '제주도', '제주도', '제주도', '제주도', '제주도', '제주도']
# 7 ['제주', '서귀포', '성산', '성판악', '고산', '이어도', '추자도']

# 91 ['2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00', '2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00', '2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00', '2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00', '2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00', '2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00', '2021-04-26 00:00', '2021-04-26 12:00', '2021-04-27 00:00', '2021-04-27 12:00', '2021-04-28 00:00', '2021-04-28 12:00', '2021-04-29 00:00', '2021-04-29 12:00', '2021-04-30 00:00', '2021-04-30 12:00', '2021-05-01 00:00', '2021-05-02 00:00', '2021-05-03 00:00']
# 91 ['13', '13', '13', '13', '16', '16', '14', '14', '12', '12', '14', '14', '15', '13', '13', '13', '13', '15', '15', '14', '14', '12', '12', '14', '13', '15', '13', '13', '12', '12', '14', '14', '12', '12', '11', '11', '13', '12', '14', '8', '8', '8', '8', '11', '11', '9', '9', '8', '8', '9', '9', '11', '13', '13', '13', '13', '15', '15', '14', '14', '12', '12', '14', '14', '15', '15', '15', '15', '15', '15', '15', '14', '14', '14', '14', '15', '14', '16', '11', '11', '13', '13', '14', '14', '13', '13', '12', '12', '14', '13', '14']


# 나누어서 정복하라 (나폴레옹)
# 문제
# 전체 문서로부터 'body' 태그 안쪽의 문자열을 추출하세
# re.DOTALL :
# 1. 개행 문자를 무시하는 옵션 (개행 문자를 일반 문자처럼 취급)
# 2. 찾으려는 패턴이 여러 줄에 걸쳐 있을 때 사

body = re.findall(r'<body>(.+)</body>', text, re.DOTALL)
# 성능을 위해서 한줄에서 찾는다.
# print(body)

# 문제
# body 태그 안 쪽 문자열로부터 location 태그를 찾으세요
# .+ : 탐욕적 (greedy)
# .+? : 비탐욕적(non-greedy) -> ? 은 0번 아니면 1번 분할을 해준다.
locations = re.findall(r'<location wl_ver="3">(.+?)</location>', body[0], re.DOTALL) # body는 문자열로 된 리스트이기 떄문
# print(locations)
# print(len(locations))

# 문제
# 로케이션 안쪽에서
# i = 0
# while i <= len(locations)-1 :
#     jeju_1 = re.findall(r'<city>.+</city>', locations[i])
#     jeju_2 = re.findall(r'<province>.+</province>', locations[i])
#     print(jeju_1, jeju_2)
#     i += 1

for loc in locations:
    # prov = re.findall(r'<city>(.+)</city>', loc)
    # city = re.findall(r'<province>(.+)</province>', loc)
    # prov, city = prov[0], city[0]
    # print(prov, city)
    prov_city = re.findall(r'<province>(.+)</province>.+<city>(.+)</city>', loc, re.DOTALL)
    prov, city = prov_city[0]
    print(prov, city)


# 문제
# location 태그 안쪽에서 data 태그를 찾아보세
#     data = re.findall(r'<data>(.+?)</data>', loc , re.DOTALL)
#
# # 문제
# # data로부터 mode, tmEf, wf, tmn, tmx, rnSt 태그를 찾아보세요
# # mode = re.findall(r'<mode>(.+)</mode>',data[0])
# # print(mode)
#
#     # for len in data :
#     #     md = re.findall(r'<mode>(.+)</mode>', loc)
#     #     tf = re.findall(r'<tmEf>(.+)</tmEf>', loc)
#     #     wf = re.findall(r'<wf>(.+)</wf>', loc)
#     #     tn = re.findall(r'<tmn>(.+)</tmn>', loc)
#     #     tx = re.findall(r'<tmx>(.+)</tmx>', loc)
#     #     rt = re.findall(r'<rnSt>(.+)</rnSt>', loc)
#     #     md, tf, wf, tn, tx, rt = md[0], tf[0], wf[0], tn[0], tx[0], rt[0]
#     #     print(prov, city, md, tf, wf, tn, tx, rt)
#
# # 제주도 제주
# # A02 2021-04-26 00:00 구름많음 13 20 30
# # A02 2021-04-26 12:00 맑음 13 20 0
# # A02 2021-04-27 00:00 구름많음 13 21 30  이런식이면 구분이 히믇ㅁ
# # ===>
# # 제주도 제주 A02 2021-04-26 00:00 구름많음 13 20 30
# # 제주도 제주 A02 2021-04-26 12:00 맑음 13 20 0
# # 제주도 제주 A02 2021-04-27 00:00 구름많음 13 21 30   용량이 늘지
#
# # 위와 같이 출력하도록 해주세요
#     for len in data :
#         md = re.findall(r'<mode>(.+)</mode>', len)
#         tf = re.findall(r'<tmEf>(.+)</tmEf>', len)
#         wf = re.findall(r'<wf>(.+)</wf>', len)
#         tn = re.findall(r'<tmn>(.+)</tmn>', len)
#         tx = re.findall(r'<tmx>(.+)</tmx>', len)
#         rt = re.findall(r'<rnSt>(.+)</rnSt>', len)
#         md, tf, wf, tn, tx, rt = md[0], tf[0], wf[0], tn[0], tx[0], rt[0]
#
#         #문제
#         # 기상청 날씨 데이터를 weather.txt 파일로 저장하세요
#         print(prov, city, md, tf, wf, tn, tx, rt, file=f) # 결과에 나오는 값을 파일에 저

        # base = '{},{},{},{},{},{},{},{}\n'
        # f.write(base.format(prov, city, md, tf, wf, tn, tx, rt))



        # f.write(prov)
        # f.write(' ')
        # f.write(city)
        # f.write(' ')
        # f.write(md)
        # f.write(' ')
        # f.write(tf)
        # f.write(' ')
        # f.write(wf)
        # f.write(' ')
        # f.write(tn)
        # f.write(' ')
        # f.write(tx)
        # f.write(' ')
        # f.write(rt)
        # f.write('\n')

        # 문제
        # print 함수를 사용해서 weather.txt 파일에 저장되는 레코드
        # print(prov + ',' +city + ',' + md + ',' + tf + ',' + wf +  ',' + tn + ','+ tx + ',' + rt, file=f)
        # print(prov, city, md, tf, wf, tn, tx, rt, file=f, sep=',')

# f.close()


# 이렇게 되면 각각의 데이터를 구분 할 수 없다. -> ,로 데이터를 구분을 한다(csv)
# 문제만 남기고 싹 지우고 풀어보세요 이 프로젝트 하나만 수행